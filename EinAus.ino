/*$file${.::EinAus.ino} ####################################################*/
/*
* Model: EinAus_v5_Test.qm
* File:  ${.::EinAus.ino}
*
* This code has been generated by QM 4.3.0 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::EinAus.ino} #################################################*/
#include "qpn.h" // QP-nano framework
#include "Arduino.h" // Arduino API

//============================================================================
// declare all AO classes...
/*$declare${AOs::EinAus} ###################################################*/
/*${AOs::EinAus} ...........................................................*/
typedef struct EinAus {
/* protected: */
    QActive super;
} EinAus;

/* protected: */
static QState EinAus_initial(EinAus * const me);
static QState EinAus_nix_zu_tun(EinAus * const me);
/*$enddecl${AOs::EinAus} ###################################################*/
//...

// AO instances and event queue buffers for them...
EinAus AO_EinAus;
static QEvt l_einausQSto[10]; // Event queue storage for EinAus
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,          (QEvt *)0,    0U                  },
    { (QActive *)&AO_EinAus, l_einausQSto, Q_DIM(l_einausQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    DEBUG_L = 9 // pin of debug LED
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&AO_EinAus.super, Q_STATE_CAST(&EinAus_initial));

    // initialize the hardware used in this sketch...
    pinMode(DEBUG_L, OUTPUT); // set the LED-L pin to output
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
    digitalWrite(DEBUG_L, HIGH);
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20);
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
    ASSR  &= ~(1U << AS2);
    TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
/* Check for the minimum required QP version */
#if (QP_VERSION < 630U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpn version 6.3.0 or higher required
#endif

/*$define${AOs::EinAus} ####################################################*/
/*${AOs::EinAus} ...........................................................*/
/*${AOs::EinAus::SM} .......................................................*/
static QState EinAus_initial(EinAus * const me) {
    /*${AOs::EinAus::SM::initial} */
    return Q_TRAN(&EinAus_nix_zu_tun);
}
/*${AOs::EinAus::SM::nix_zu_tun} ...........................................*/
static QState EinAus_nix_zu_tun(EinAus * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::EinAus} ####################################################*/
//...
