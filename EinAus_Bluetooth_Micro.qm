<?xml version="1.0" encoding="UTF-8"?>
<model version="4.0.3" links="0">
 <documentation>Wahrscheinlich die kürzeste Variante, um einen Ausgang in Abhängigkeit von einem Eingang zu setzen.

Der Ausgang wird direkt in der entry-Aktion des State angesteuert.

Der &quot;Eingang&quot; (Tastatur) wird interrupt-getriggert abgefragt.

Die event-Signale sind in der allgemeinen Enumeration.</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="EinAus" superclass="qpn::QActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="2,4,5,1,21,4,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Aus">
     <entry>digitalWrite(LED_L, LOW);</entry>
     <tran trig="AN" target="../../2">
      <tran_glyph conn="2,14,3,1,21,6,-2">
       <action box="0,-2,4,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,19,10">
      <entry box="1,2,17,4"/>
     </state_glyph>
    </state>
    <state name="An">
     <entry>digitalWrite(LED_L, HIGH);</entry>
     <tran trig="AUS" target="../../1">
      <tran_glyph conn="2,26,3,1,23,-16,-4">
       <action box="0,-2,4,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,18,19,10">
      <entry box="1,2,17,4"/>
     </state_glyph>
    </state>
    <state_diagram size="28,30"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="EinAus.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

//============================================================================
// declare all AO classes...
$declare(AOs::EinAus)
//...

// AO instances and event queue buffers for them...
EinAus AO_EinAus;
static QEvt l_einausQSto[10]; // Event queue storage for EinAus
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,          (QEvt *)0,    0U                  },
    { (QActive *)&amp;AO_EinAus, l_einausQSto, Q_DIM(l_einausQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    LED_L             = 13,  // the pin number of the on-board LED (L)
};

// various signals for the application...
enum {
    AN_SIG = Q_USER_SIG,     // over keyboard
    AUS_SIG                  // over keyboard
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_EinAus.super, Q_STATE_CAST(&amp;EinAus_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial1.begin(115200); // set the highest standard baud rate of 115200 bps
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER0_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // read inputs over Serial1
    if (Serial1.available() &gt; 0) {
        switch (Serial1.read()) { // read the incoming byte
            // events are posted directly instead of publishing
            case 'e':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, AN_SIG, 0U);
                break;
            case 'a':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, AUS_SIG, 0U);
                break;
        }
    }
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR0A = (1U &lt;&lt; WGM01) | (0U &lt;&lt; WGM00);
    TCCR0B = (1U &lt;&lt; CS02 ) | (0U &lt;&lt; CS01) | (1U &lt;&lt; CS00); // 1/2^10
    TIMSK0 = (1U &lt;&lt; OCIE0A); // enable TIMER2 compare Interrupt
    TCNT0  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR0A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::EinAus)
//...
</text>
  </file>
 </directory>
</model>
