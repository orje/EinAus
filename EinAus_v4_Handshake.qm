<?xml version="1.0" encoding="UTF-8"?>
<model version="4.0.3" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="EinAus" superclass="qpn::QActive">
   <documentation>Trennung zwischen Datenempfang und Ledansteuerung zur Vermeidung von Interruptüberschneidungen.</documentation>
   <attribute name="befehl" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>Programm- und Farbwert</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action brief=" Taktsignal">QActive_armX((QActive *)me, 0U,
 BSP_TICKS_PER_SEC/100U, BSP_TICKS_PER_SEC/100U);</action>
     <initial_glyph conn="4,4,5,1,45,4,-4">
      <action box="1,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Handshake">
     <documentation>Für asynchronen Signalaustausch zwischen App und Arduino.</documentation>
     <initial target="../1">
      <initial_glyph conn="5,10,5,1,19,4,-2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="bereit">
      <exit>Serial.println(&quot;bereit&quot;);
me-&gt;befehl = 0;</exit>
      <tran trig="START" target="../../2">
       <tran_glyph conn="4,22,3,1,39,6,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,12,18,12">
       <exit box="1,2,16,6"/>
      </state_glyph>
     </state>
     <state name="Wert">
      <tran trig="STOPP" target="../../3">
       <action>Serial.println(me-&gt;befehl);    // debug</action>
       <tran_glyph conn="4,50,3,1,39,6,-21">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="WERT" target="../2">
       <tran_glyph conn="4,31,3,1,35,4,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Wertverarbeitung">
       <entry>uint8_t N;
N = (uint8_t)(Q_PAR(me));

me-&gt;befehl *= 10;         // Vorbereitung für
me-&gt;befehl += N - '0';    // dreistelligen Wert</entry>
       <state_glyph node="6,33,31,15">
        <entry box="1,2,29,11"/>
       </state_glyph>
      </state>
      <state_glyph node="4,26,37,26"/>
     </state>
     <state name="fertig">
      <entry>Serial.println(&quot;fertig&quot;);</entry>
      <tran trig="Q_TIMEOUT">
       <choice target="../../../../2/2">
        <guard>me-&gt;befehl &gt; 0</guard>
        <choice_glyph conn="52,17,5,3,12">
         <action box="1,-2,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../2/1">
        <guard>else</guard>
        <choice_glyph conn="52,17,4,3,9,12">
         <action box="1,7,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,62,3,-1,43,-45,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,54,18,10">
       <entry box="1,2,16,4"/>
      </state_glyph>
     </state>
     <state_glyph node="3,6,42,60"/>
    </state>
    <state name="Ledansteuerung">
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="49,33,3,1,39,-23,-43">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Aus">
      <entry>digitalWrite(LED_L, LOW);</entry>
      <state_glyph node="64,24,21,8">
       <entry box="1,2,19,4"/>
      </state_glyph>
     </state>
     <state name="An">
      <entry>digitalWrite(LED_L, HIGH);</entry>
      <state_glyph node="64,15,21,8">
       <entry box="1,2,19,4"/>
      </state_glyph>
     </state>
     <state_glyph node="49,12,37,23"/>
    </state>
    <state_diagram size="92,69"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="EinAus.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

//============================================================================
// declare all AO classes...
$declare(AOs::EinAus)
//...

// AO instances and event queue buffers for them...
EinAus AO_EinAus;
static QEvt l_einausQSto[10]; // Event queue storage for EinAus
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,          (QEvt *)0,    0U                  },
    { (QActive *)&amp;AO_EinAus, l_einausQSto, Q_DIM(l_einausQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    LED_L = 13               // the pin number of the on-board LED (L)
};

// various signals for the application...
enum {
    START_SIG,               // Übertragungsanfrage
    STOPP_SIG,               // Übertragungsende
    WERT_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_EinAus.super, Q_STATE_CAST(&amp;EinAus_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial.begin(115200); // set the highest standard baud rate of 115200 bps
    Serial.print(F(&quot;Start, QP-nano version: &quot;));
    Serial.println(QP_VERSION);
    Serial.println(&quot;&quot;);
    Serial.println(F(&quot;EinAus&quot;));
    Serial.println(F(&quot;Startzeichen = &lt;&quot;));
    Serial.println(F(&quot;Ein = 1&quot;));
    Serial.println(F(&quot;Aus = 0&quot;));
    Serial.println(F(&quot;Stoppzeichen = &gt;&quot;));
    Serial.println(&quot;&quot;);
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // read inputs over Serial
    if (Serial.available() &gt; 0) {
        uint8_t n = Serial.read();
        switch (n) { // read the incoming byte
            // events are posted directly instead of publishing
            case '&lt;':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, START_SIG, 0U);
                break;
            case '0' ... '9':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, WERT_SIG, n);
                break;
            case '&gt;':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, STOPP_SIG, 0U);
                break;
        }
    }
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::EinAus)
//...
</text>
  </file>
 </directory>
</model>
